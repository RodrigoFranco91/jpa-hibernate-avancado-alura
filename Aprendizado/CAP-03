Neste capítulo discutimos sobre Performance de Consultas:


Quase sempre esquecemos de avaliar a performance das queries que estamos escrevendo. Para avaliar isso vamos criar a classe
PerformanceConsultas com o método main.

Na classe PerformanceConsultas vamos povoar o nosso banco de dados, para depois podermos fazer os testes de performance. Veja como 
está a classe:

	public class TestePerformanceConsultas {
		
		public static void main(String[] args) {
			popularBancoDeDados();
		}
		

		private static void popularBancoDeDados() {
			Categoria celulares = new Categoria("CELULARES");
			Categoria videogames = new Categoria("VIDEOGAMES");
			Categoria informatica = new Categoria("INFORMATICA");

			Produto celular = new Produto("Xiaomi Redmi", "Muito legal", new BigDecimal("800"), celulares);
			Produto videogame = new Produto("PS5", "Playstation 5", new BigDecimal("8000"), videogames);
			Produto macbook = new Produto("Macbook", "Macboo pro retina", new BigDecimal("14000"), informatica);

			Cliente cliente = new Cliente("Rodrigo", "123456");

			Pedido pedido = new Pedido(cliente);
			pedido.adicionarItem(new ItemPedido(10, pedido, celular));
			pedido.adicionarItem(new ItemPedido(40, pedido, videogame));

			Pedido pedido2 = new Pedido(cliente);
			pedido2.adicionarItem(new ItemPedido(2, pedido, macbook));

			EntityManager em = JPAUtil.getEntityManager();
			ProdutoDao produtoDao = new ProdutoDao(em);
			CategoriaDao categoriaDao = new CategoriaDao(em);
			ClienteDao clienteDao = new ClienteDao(em);
			PedidoDao pedidoDao = new PedidoDao(em);

			em.getTransaction().begin();

			categoriaDao.cadastrar(celulares);
			categoriaDao.cadastrar(videogames);
			categoriaDao.cadastrar(informatica);

			produtoDao.cadastrar(celular);
			produtoDao.cadastrar(videogame);
			produtoDao.cadastrar(macbook);

			clienteDao.cadastrar(cliente);

			pedidoDao.cadastrar(pedido);
			pedidoDao.cadastrar(pedido2);

			em.getTransaction().commit();
			em.close();
		}

	}
	

Agora vamos começar nossas analise de Performance:

- O primeiro teste é fazer a busca de um pedido, podemos usar o find() do EntityManager. Veja:

		EntityManager em = JPAUtil.getEntityManager();
		Pedido pedido = em.find(Pedido.class, 1l);
		System.out.println(pedido.getData());
		
Agora perceba no LOG o comando SQL rodado. Você verá que houve um JOIN de Pedido com Cliente, pois a classe Pedido tem um atributo
do tipo Cliente (relacionamento) to tipo *ToOne (poderia ser OneToOne, ManyToOne) e por padrão esse relacionamento tem o carregamento
do tipo EAGER, ou seja, ele faz o carregamento antecipado, mesmo sem precisar! Veja que nosso objetivo era mostrar apenas a data
(atributo dataAtual), mas mesmo assim houve o JOIN (carregamento) da classe Cliente. O pior que isso gera um efeito cascata, se
Cliente tivesse relacionamentos EAGER (*ToOne) haveria também outros JOIN's.

Ja o relacinamento *ToMany não faz isso, ele só carrega (fará o JOIN) se acessarmos o atributo (a lista) anotado com *ToMany. Esse
tipo de carregamento é do tipo LAZY.

Resumindo: 

	EAGER faz carregamento automático e este tipo de carregamento é o padrão para os atributos @*ToOne
	LAZY não faz carregamento automático (apenas quando usa) e este tipo de carregamento é o padrão para os atributos @*ToMany
	
Devido isso é boa pratica usar o argumento fetch = FetchType.LAZY nas anotações do tipo @*ToOne, ficando assim (na classe Pedido):

	@ManyToOne(fetch = FetchType.LAZY)
	private Cliente cliente;
	
Tenha em mente que usando FetchType.LAZY fará JOIN quando acessarmos o atributo.
Tenha em mente também que o JOIN pesa, diminui a performance da consulta!


Empacto (Efeito Colateral) em usar LAZY para tudo:

O problema de deixar tudo LAZY é que as vezes podemos receber a exception LazyInitializationException, e isso vai ocorrer quando
tentarmos acessar o atributo anotado com @ManyToOne(fetch = FetchType.LAZY) que é a referencia da entidade/classe com o 
EntityManager fechado! Tenha em mente que o JOIN só ocorrerá quando for necessário, veja o exemplo:

	EntityManager em = JPAUtil.getEntityManager();
	Pedido pedido = em.find(Pedido.class, 1l);
	System.out.println(pedido.getCliente().getNome());
	
Será na linha do Sytem.out.println() que vai ocorrer o JOIN, agora imagina se antes do System.out.print() o EntityManager seja 
fechado,a Exception citada ocorrerá!

Você deve estar se perguntando, por qual motivo eu fecharia o EntityManager se eu quero ainda imprimir um valor, o problema que ao 
usar um Servidoe de Aplicação ou Framework o controle do EntityManager não é feito por nós e sim por eles. Normalmente o 
EntityManager é aberto quando um método DAO é chamado e ao finalizar o método o EntityManager é fechado!

Como resolver isso? Devemos manter os atributos @*ToOne anotado com @ManyToOne(fetch = FetchType.LAZY) e criar na classe DAO métodos
que vão retornar via JPQL o Objeto completo, ou seja, os valores do objeto juntamente com seus relacionamentos. Assim quando 
quisermos apenas alguns dados que não precisa do relacionamento podemos usar o método find() por exemplo, já quando precisar do
relacionamento usamos o método cirado por nós (teremos os dois mundos/cenários). Veja como seria o metodo:

	//Resolvendo o problema de LazyInitializationException
	//Com esse método o objeto Pedido é retornado com seu relacionamento com Cliente, graça ao JOIN FETCH
	public Pedido buscarPedidoComCLiente(Long id) {
		return this.em.createQuery("SELECT p FROM Pedido p JOIN FETCH p.cliente WHERE p.id = :id", Pedido.class)
		.setParameter("id", id)
		.getSingleResult();
		
	}
	
Esse método é retorna um Objeto Pedido do tipo EAGER, ou seja, carregado com seus relacionamentos.

Dessa forma o trecho a seguir fundiona:

	PedidoDao pedidoDao = new PedidoDao(em);
	Pedido pedidoEager = pedidoDao.buscarPedidoComCLiente(1l);
	em.close();

	System.out.println(pedidoEager.getCliente().getNome());



















